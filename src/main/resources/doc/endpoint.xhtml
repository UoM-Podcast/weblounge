<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
	<head>
	  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
	  <title>${metadata.title} Endpoint Documentation</title>
	  <style type="text/css">
    	  /* styles for the page */
    	  html {
    	    font: 13px/1.231 arial,helvetica,clean,sans-serif;
    	  }
    	  fieldset {
    	    margin-bottom: 2em;
    	    margin-top: 0.5em;
    	    padding-bottom: 1em;
    	    width: 90%;
    	  }
    	  pre {
    	    white-space: pre-wrap;       /* css-3 */
    	    white-space: -moz-pre-wrap !important;  /* Mozilla, since 1999 */
    	    white-space: -pre-wrap;      /* Opera 4-6 */
    	    white-space: -o-pre-wrap;    /* Opera 7 */
    	    word-wrap: break-word;       /* Internet Explorer 5.5+ */
    	  }
    	  table.method {
    	    width: 100%;
    	  }
    	  table.testing {
    	    width: 96%;
    	    border: 2px solid #CCC;
    	  }
    	  ul {
    	    margin: 0.2em;
    	    padding-left: 1em;
    	  }
    	  div.table_spacer {
    	    height: 2em;
    	  }
    	  div.hidden_form {
    	    padding-bottom: 0.5em;
    	  }
    	  div.footer {
    	    padding-top: 1em;
    	    font-weight: bold;
    	  }
    	  span.required {
    	    color: red;
    	  }
    	  .method_set_header {
    	    padding-left: 0.5em;
    	    padding-right: 0.5em;
    	    font-size: 1.4em;
    	    font-weight: bold;
    	  }
    	  .method_header th {
    	    background: #069 none repeat scroll 0 0;
    	    color: white;
    	    font-size: 0.9em;
    	    font-weight: bold;
    	    padding: 0.6em 0.3em;
    	    text-align: left;
    	    vertical-align: top;
    	  }
    	  th.method_header_left {
    	    text-align: right;
    	    padding: 0.6em 1em;
    	    width: 200px;
    	  }
    	  tr.method th {
    	    font-family: sans-serif;
    	    font-weight: normal;
    	    padding: 0.5em 1.0em;
    	    text-align: right;
    	    vertical-align: top;
    	  }
    	  tr.method th.method_important {
    	    font-weight: bold;
    	  }
    	  tr.method td {
    	    border-bottom: 1px solid #CCC;
    	    padding-bottom: 6px;
    	    padding-left: 4px;
    	    padding-top: 6px;
    	    vertical-align: top;
    	  }
    	  tr.testform TD {
    	  }
    	  tr.testform A {
    	  }
    	  div.hidden {
    	    display: none;
    	  }
    	  div.spaced {
    	    margin: 4px 0px;
    	  }
    	  td.form_label {
    	    width: 20%;
    	    padding-right: 4px;
    	    padding-top: 10px;
    	    vertical-align: top;
    	    text-align: right;
    	    white-space: nowrap;
    	  }
    	  .form_field_description {
    	    font-size: 0.9em !important;
    	    padding-top: 11px;
    	    padding-left: 4px;
    	    vertical-align: top;
    	    text-align: left;
    	  }
    	  td.form_submit {
    	    border: none !important;
    	  }
    	  a.hidden {
    	    display: none;
    	  }
    	  .test_form_response textarea {
    	    font-size: small;
    	    font-family: monospace;
    	    width: 100%;
    	  }
          .response_status {
            font-family: monospace;
            font-size: small;
            padding-top: 10px;
            padding-bottom: 5px;
          }
          .response_headers {
            font-family: monospace;
            font-size: small;
            padding-top: 5px;
            padding-bottom: 10px;
          }
          .response_body {
            width: 100%;
            font-family: monospace;
            border-left: 4px solid #999;
            padding-top: 10px;
            padding-bottom: 10px;
            padding-left: 10px;
          }
	  </style>
	</head>
	<body>
		<h2>${metadata.title} Endpoint Documentation</h2>
		<span class="meta_url"><code>${metadata.url}</code></span>
		<#if metadata.abstract??>
		<div class="meta_abstract">${metadata.abstract}</div>
		</#if>
		
		<#list endpointCollections as endpointCollection>
		<fieldset id="endpoint_holder_${endpointCollection.name}">
		<legend class="method_set_header">${endpointCollection.title} methods</legend>
		<#if (endpointCollection.endpoints?size <= 0)>
		<em>NONE</em>
		<#else>
		<#list endpointCollection.endpoints as endpoint>
		<table id="${endpoint.name}" class="method" cellpadding="0px" cellspacing="0px"
		  summary="${endpointCollection.title} function for the ${endpoint.method} ${endpoint.path} endpoint, Name of the attribute followed by the value">
		  <thead>
		    <tr class="method_header">
		      <th width="200px" scope="col" class="method_header_left">Name</th>
		      <th scope="col">Value and Notes</th>
		    </tr>
		  </thead>
		  <tbody>
		    <tr class="method">
		      <th class="row" scope="row">Method / Path:</th>
		      <td><tt title="${metadata.url}${endpoint.path}${endpoint.pathFormat!}"><b>${endpoint.method} ${endpoint.path}${endpoint.pathFormatHtml!}</b></tt></td>
		    </tr>
		    <#if endpoint.description??>
		    <tr class="method">
		      <th scope="row">Description:</th>
		      <td>${endpoint.description}</td>
		    </tr>
		    </#if>
		    <#if (endpoint.pathParameters?size > 0)>
		    <tr class="method">
		      <th class="row" scope="row">Path parameters:</th>
		      <td>
		        <#list endpoint.pathParameters as param>
		        <tt>${param.name}</tt>: ${param.description!"<em>NONE</em>"} <#if param.defaultValue??><tt>[${param.defaultValueHtml}]</tt></#if><#if param_has_next> <br/></#if>
		        </#list>
		      </td>
		    </tr>
		    </#if>
		    <#if (endpoint.requiredParameters?size > 0)>
		    <tr class="method">
		      <th class="row" scope="row">Required (form) parameters:</th>
		      <td>
		        <#list endpoint.requiredParameters as param>
		        <tt>${param.name}</tt>: ${param.description!"<em>NONE</em>"} <#if param.defaultValue??><tt>[${param.defaultValueHtml}]</tt></#if><#if param_has_next> <br/></#if>
		        </#list>
		      </td>
		    </tr>
		    </#if>
		    <#if endpoint.bodyParameter??>
		    <tr class="method">
		      <th class="row" scope="row">Body (upload) param:</th>
		      <td>
		        <#if endpoint.bodyParameter.defaultValue??>: </#if>${endpoint.bodyParameter.description!"<em>NONE</em>"}
		      </td>
		    </tr>
		    </#if>
		        <#if (endpoint.optionalParameters?size > 0)>
		    <tr class="method">
		      <th scope="row">Optional (<#if (endpoint.method == "GET")>query<#else>form</#if>) parameters:</th>
		      <td>
		        <#list endpoint.optionalParameters as param>
		        <tt>${param.name}</tt>: ${param.description!"<em>NONE</em>"} <#if param.defaultValue??><tt>[${param.defaultValueHtml}]</tt></#if><#if param_has_next> <br/></#if>
		        </#list>
		      </td>
		    </tr>
		    </#if>
		    <#if (endpoint.outputFormats?size > 0)>
		    <tr class="method">
		      <th scope="row">Response formats:</th>
		      <td>
		        <#list endpoint.outputFormats as format>
		        <#if format.url??><a href="${format.url}">${format.name}</a><#else>${format.name}</#if> <#if format.description??>(${format.description})</#if><#if format_has_next> <br/></#if>
		        </#list>
		      </td>
		    </tr>
		    </#if>
		    <#if (endpoint.responseStatuses?size > 0)>
		    <tr class="method">
		      <th scope="row">Status codes:</th>
		      <td>
		        <#list endpoint.responseStatuses as status>
		        <tt>${status.code}: ${status.name}</tt>&nbsp;&mdash;&nbsp;${status.description!"<em>NONE</em>"}<#if status_has_next> <br/></#if>
		        </#list>
		      </td>
		    </tr>
		    </#if>
		    <#if (endpoint.notes?size > 0)>
		    <tr class="method">
		      <th scope="row">Notes:</th>
		      <td>
		        <ul>
		          <#list endpoint.notes as note>
		          <li>${note}</li>
		          </#list>
		        </ul>
		      </td>
		    </tr>
		    </#if>
		    <tr class="method testform">
		      <th scope="row">Testing:</th>
		      <td>
		        <#if endpoint.form??>
		        <#if endpoint.form.html??><#-- just dump the html value -->
		        ${endpoint.form.html}
		        <#elseif (endpoint.form.basic)><#-- link to the basic endpoint path -->
		        <a href="${endpoint.path}${endpoint.queryString!}">${endpoint.path}${endpoint.queryString!}</a>
		        <#elseif endpoint.form.url??><#-- just create a link to the form -->
		        <a href="${endpoint.form.url}" target="_new">${endpoint.form.title!"Go to Testing form"}</a>
		        <#else>
		        <a href="#" class="link_show_testform">${endpoint.form.title!"Test form"} (click to reveal)</a>
		        <div class="hidden_form hidden">
		          <form id="form_${endpoint.name}" class="form_test_form" action="${metadata.url}${endpoint.path}" 
		                method="${endpoint.method?lower_case}"<#if endpoint.form.fileUpload> enctype="multipart/form-data"</#if>>
		            <input class="form_action_holder" type="hidden" value="${metadata.url}${endpoint.path}" />
		            <input class="form_endpoint_name" type="hidden" value="${endpoint.name}" />
		            <input class="form_method" type="hidden" value="${endpoint.method}" />
		            <#if (endpoint.form.ajaxSubmit)>
		            <input class="form_ajax_submit" type="hidden" value="1" />
		            </#if>
		            <div class="spaced">
		                <strong>Form action:</strong> <tt class="form_path">${metadata.url}${endpoint.path}</tt>
		                <#if (endpoint.form.usesPathFormat)>
		                  [<label for="${endpoint.name}_FORMAT">Format</label>:
		                  <select id="${endpoint.name}_FORMAT" name="form_path_format">
		                    <option value="{FORMAT}">format</option>
		                    <#list endpoint.outputFormas as format>
		                    <option value="${format}">${format}</option>
		                    </#list>
		                  </select>]
		                </#if>
		            </div>
		            <table class="testing" cellpadding="0" cellspacing="0">
		              <#list endpoint.form.parameters as item>
		              <tr class="form_field <#if item.required>form_required<#else>form_optional</#if>">
		                <#if item.type == "text">
		                <td class="form_textarea" colspan="3">
		                  <label for="${endpoint.name}_${item.name}"><tt>${item.name}</tt></label>:<br/>
		                  <textarea id="${endpoint.name}_${item.name}" name="${item.name}" class="form_field_text form_param_submit<#if item.required> form_param_required</#if>" 
		                    rows="${(item.attributes.rows)!'3'}" cols="${(item.attributes.cols)!'80'}">${item.defaultValue!}</textarea>
		                  <div class="form_field_description">${item.description!}</div>
		                </td>
		                <#elseif item.type == "boolean">
		                <td class="form_label">
		                  <#if item.required><span class="required">*</span>&nbsp;</#if><label for="${endpoint.name}_${item.name}"><tt>${item.name}</tt></label>:
		                </td>
		                <td>
		                  <input id="${endpoint.name}_${item.name}" name="${item.name}" class="form_field <#if item.path>form_param_path<#else>form_param_submit</#if><#if item.required> form_param_required</#if>" 
		                    type="checkbox" value="${item.defaultValue!}" />
		                </td>
		                <td class="form_field_description">${item.description!}</td>
		                <#elseif item.type == "file">
		                <td class="form_label">
		                  <#if item.required><span class="required">*</span>&nbsp;</#if><label for="${endpoint.name}_${item.name}"><tt>${item.name}</tt></label>:
		                </td>
		                <td>
		                  <input id="${endpoint.name}_${item.name}" name="${item.name}" class="form_field_file" class="form_field form_param_upload<#if item.required> form_param_required</#if>" type="file" />
		                </td>
		                <td class="form_field_description">${item.description!}</td>
		                <#elseif item.type == "enum">
		                <td class="form_label">
		                  <#if item.required><span class="required">*</span>&nbsp;</#if><label for="${endpoint.name}_${item.name}"><tt>${item.name}</tt></label>:
		                </td>
		                <td>
		                  <select id="${endpoint.name}_${item.name}" class="form_field <#if item.path>form_param_path<#else>form_param_submit</#if><#if item.required> form_param_required</#if>" name="${item.name}">
		                    <#list item.choices as choice>
		                    <option value="${choice}"<#if (choice == item.defaultValue)> selected="selected"</#if>>${choice}</option>
		                    </#list>
		                  </select>
		                </td>
		                <td class="form_field_description">${item.description!}</td>
		                <#else>
		                <td class="form_label">
		                  <#if item.required><span class="required">*</span>&nbsp;</#if><label for="${endpoint.name}_${item.name}"><tt>${item.name}</tt></label>:
		                </td>
		                <td>
		                  <input id="${endpoint.name}_${item.name}" class="form_field <#if item.path>form_param_path<#else>form_param_submit</#if><#if item.required> form_param_required</#if>" name="${item.name}" 
		                    type="text" value="${item.defaultValue!}" size="${(item.attributes.size)!'30'}" />
		                </td>
		                <td class="form_field_description">${item.description!}</td>
		                </#if>
		              </tr>
		              </#list>
		              <tr>
		                <td colspan="3">
		                  <div class="form_submit">
		                    <input type="submit" value="Submit" title="Submit" />
		                    <input type="reset" value="Reset" title="Reset" />
		                  </div>
		                </td>
		              </tr>
		            </table>
		          </form>
		          <#if (endpoint.form.ajaxSubmit)>
		          <div class="test_form_working hidden">Waiting for response...</div>
		          <div class="test_form_response hidden">
		            <div style="padding-top:10px"><b>Response:</b></div>
                    <div class="response_status"></div>
                    <div class="response_headers"></div>
                    <div class="response_body"></div>
		          </div>
		          </#if>
		        </div>
		        <a href="#" class="link_hide_testform hidden">Hide</a>          
		        </#if>
		      </td>
		    </tr>
		    </#if>
		  </tbody>
		</table>
		
		<#if endpoint_has_next>
		<div class="table_spacer"></div>
		</#if>
		
		</#list>
		</#if>
		</fieldset>
		</#list>
		
		
		<#if (notes?size > 0)>
		<fieldset>
		<legend class="method_set_header">General Notes</legend>
		<ul>
		  <#list notes as note>
		  <li>${note}</li>
		  </#list>
		</ul>
		</fieldset>
		</#if>
		
		<!-- JAVASCRIPT below here -->
		<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
		<script type="text/javascript">
			(function($) {
			
			    /**
			     * Add a click handler to the link that shows the test form.
			     */
			    $("a.link_show_testform").click(
			        function() {
			           var link = $(this);
			           var form = link.parent().find("div.hidden_form");
			           var link_hide_testform = link.parent().find("a.link_hide_testform");
			           form.fadeIn(400);
			           link_hide_testform.show();
			           link.hide();
			           return false;
			        }
			    );
			
			    /**
			     * Add a click handler to the link that hides the test form.
			     */
			    $("a.link_hide_testform").click(
			        function() {
			           var link = $(this);
			           var form = link.parent().find("div.hidden_form");
			           var link_show_testform = link.parent().find("a.link_show_testform");
			           form.fadeOut(200);
			           link_show_testform.show();
			           link.hide();
			           return false;
			        }
			     );
			
			    /**
			     * Takes a path and integrates the pathParameters values into it.
			     *
			     * @param path the path with keys (e.g. /my/{thing}/{stuff})
			     * @param parameters the parameters to put into the path (e.g. {'thing':'apple'})
			     */
			    function updatePath(path, parameters) {
			        var newPath = path;
			        for (var key in parameters) {
			            if (parameters.hasOwnProperty(key)) {
			                var value = parameters[key];
			                if (value !== undefined && value !== null && value !== '') {
			                    newPath = newPath.replace('{' + key + '}', value);
			                }
			            }
			        }
			        return newPath;
			    }
			
			    /**
			     * Checks the path parameters.
			     */
			    function checkPath(form) {
			        var parameters = [];
			        form.find(".form_param_path").each(function() {
			            var param = $(this);
			            parameters[param.attr('name')] = param.val();
			        });
			        var form_path = form.find("input.form_action_holder").val();
			        var path = updatePath(form_path, parameters);
			        // update form and display
			        form.attr('action', path);
			        form.find(".form_path").html(path);
			        if (path.indexOf("{") >= 0 && path.indexOf("}") >= 0) {
			            return false;
			        }
			        return true;
			    }
			
			    /**
			     * Checks the form for required parameters and disables the form's submit
			     * button if a required parameter is missing.
			     */
			    function checkRequired(form) {
			        var required = form.find(".form_param_required");
			        var total = required.length;
			        var counter = 0;
			        required.each(function() {
			            var formField = $(this);
			            if (formField.val() !== undefined && formField.val() !== '') {
			                counter++;
			            }
			        });
			        var formInputs = form.find("div.form_submit input");
			        if (counter >= total) {
			            // submit is ok
			            formInputs.removeAttr('disabled');
			            return true;
			        } else {
			            // disable form submit until required options at set
			            formInputs.attr('disabled', 'disabled');
			            return false;
			        }
			    }
			 
			    /**
			     * Loops through all the test forms and wires the input fields with the
			     * checkXYZ() - methods.
			     */
			    $("form.form_test_form").each(function() {
			        var form = $(this);
			        if (form.find("input.form_action_holder").length >= 1) {
			
			            // wire path parameters
			            var formParams = form.find(".form_param_path");
			            if (formParams.length > 0) {
					        formParams.change(function() {
					        	checkPath(form);
					        });
					        formParams.keyup(function() {
					        	checkPath(form);
					        });
			            }
			            checkPath(form);
			
			            // wire required parameters
			            var reqParameters = form.find(".form_param_required");
			            if (reqParameters.length > 0) {
			                reqParameters.change(function() {
			                	checkRequired(form);
			                });
			                reqParameters.keyup(function() {
			                	checkRequired(form);
			                });
			            }
			            checkRequired(form);
			
			            // handle the ajax submissions
			            if (form.find("input.form_ajax_submit").length >= 1) {
			              // add an event handler to the form submit
			              form.bind('submit', function() {
			                  if (checkRequired(form)) {
			                      var submitParameters = {};
			                      form.find(".form_param_submit").each(function() {
			                          var param = $(this);
			                          submitParameters[param.attr('name')] = param.val();
			                      });
			
			                      var method = form.find(".form_method").val();
			                      var url = form.attr('action');
			                      form.parent().find(".test_form_working").show();
			                      form.parent().find(".test_form_response input").click(function() {
			                          $(this).parent.hide();
			                      });
			
			                      // clear previous responses
			                      var responseBody = form.parent().find(".test_form_response");
			                      responseBody.hide();
			                      responseBody.find("div.response_status").text("");
                                  responseBody.find("div.response_headers").text("");
                                  responseBody.find("div.response_body").text("");
			
			                      // make the request
			                      $.ajax({
			                          type: method,
			                          url: url,
			                          processData: true,
			                          dataType: 'text',
			                          data: submitParameters,
			                          success: function(data, textStatus, request) {
			                              form.parent().find(".test_form_working").hide();
                                          // response status
			                              var statusText = "<b>Status:</b> <tt>" + request.status + " (" + request.statusText + ")</tt>";
                                          responseBody.find("div.response_status").html(statusText);
                                          // response headers
			                              var headers = request.getAllResponseHeaders();
                                          if (headers !== undefined) {
                                            var headersText = "";
                                            var headerLines = headers.split("\n");
                                            for (var i = 0; i < headerLines.length; i++) {
                                              if (headerLines[i] !== "") {
                                                var header = headerLines[i].split("\: ");
                                                headersText += "<b>" + header[0] + "</b>: " + header[1] + "<br/>";
                                              }
                                            }
                                            responseBody.find("div.response_headers").html(headersText);
                                          }
                                          // response body
                                          if (data !== undefined && data != "") {
                                            responseBody.find("div.response_body").text(data);
                                          } else {
                                            responseBody.find("div.response_body").html("<i>Empty response boy</i>");
                                          }
			                              responseBody.show();
			                          },
			                          error: function(request, textStatus, errorThrown) {
			                              form.parent().find(".test_form_working").hide();
                                          // response status
			                              var statusText = "<b>Status:</b> <tt>" + request.status + " (" + request.statusText + ")</tt>";
                                          responseBody.find("div.response_status").html(statusText);
                                          // response headers
			                              var headers = request.getAllResponseHeaders();
                                          if (headers !== undefined) {
                                            var headersText = "";
                                            var headerLines = headers.split("\n");
                                            for (var i = 0; i < headerLines.length; i++) {
                                              if (headerLines[i] !== "") {
                                                var header = headerLines[i].split("\: ");
                                                headersText += "<b>" + header[0] + "</b>: " + header[1] + "<br/>";
                                              }
                                            }
                                            responseBody.find("div.response_headers").html(headersText);
                                          }
			                              responseBody.show();
			                          }
			                      });
			                  } else {
			                      alert("Fill out all required fields first");
			                  }
			                  return false;
			              });
			            }
			        }
			    });
			}(jQuery));
		</script>
	</body>
</html>