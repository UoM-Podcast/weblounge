/*
 *  Weblounge: Web Content Management System
 *  Copyright (c) 2010 The Weblounge Team
 *  http://weblounge.o2it.ch
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program; if not, write to the Free Software Foundation
 *  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */

package ch.o2it.weblounge.common.impl.util.doc;

import org.apache.commons.lang.StringUtils;

import java.util.ArrayList;
import java.util.List;

/**
 * Models a test form that can be added to an endpoint documentation to allow
 * for testing of the documented endpoint.
 */
public class TestForm {

  /** Indicates this form data was autogenerated */
  private boolean autoGenerated = false;

  /**
   * Indicates whether the form submission should be an ajax submit or a normal
   * submit
   */
  private boolean ajaxSubmit = false;

  /**
   * If this is true then the upload contains a bodyParam (i.e. a file upload
   * option)
   */
  private boolean fileUpload = false;

  /** Indicates that this test form is for a basic endpoint which has no params */
  private boolean basic = false;

  /** This is used to render the test form in place of using the template */
  private String html = null;

  /** URL to the page where a test form is located (no form is rendered) */
  private String url = null;

  /** The form title */
  private String title = null;

  /**
   * Indicates the the path contains the {FORMAT} key in it which should be
   * replaced by a real value when the path is output
   */
  private boolean usesPathFormat = false;

  /** Form parameters */
  private List<Parameter> parameters;

  /**
   * Create a form which is automatically generated using the current endpoint
   * data.
   */
  public TestForm() {
    this.autoGenerated = true;
    this.html = null;
  }

  /**
   * Creates a form from the given html code.
   * 
   * @param html
   *          the form code
   */
  public TestForm(String html) {
    if (StringUtils.isBlank(html))
      throw new IllegalArgumentException("Html must not be blank");

    this.html = html;
  }

  /**
   * Creates an empty form that will submit it's data to the given url.
   * 
   * @param url
   *          the form url
   * @param title
   *          the form title
   */
  public TestForm(String url, String title) {
    if (StringUtils.isBlank(url))
      throw new IllegalArgumentException("Url must not be blank");

    this.url = url;
    this.title = title;
  }

  /**
   * Creates a form that will use ajax to submit it's data.
   * 
   * @param title
   *          the form data
   * @param ajaxSubmit
   *          <code>true</code> to submit using ajax
   */
  public TestForm(String title, boolean ajaxSubmit) {
    this.parameters = new ArrayList<Parameter>();
    this.title = title;
    this.ajaxSubmit = ajaxSubmit;
  }

  /**
   * Creates a form with the given parameters and title that will submit the
   * data using ajax.
   * 
   * @param title
   *          the form title
   * @param ajaxSubmit
   *          <code>true</code> to submit using ajax
   * @param parameters
   *          the parameters
   */
  public TestForm(String title, boolean ajaxSubmit, Parameter[] parameters) {
    if (parameters == null || parameters.length == 0)
      throw new IllegalArgumentException("Parameters must be set to at least on item");

    this.parameters = new ArrayList<Parameter>(parameters.length);
    this.title = title;
    this.ajaxSubmit = ajaxSubmit;
  }

  /**
   * Special constructor which will auto-populate the form using the data in the
   * endpoint, this will enable the ajax submit if it is possible to do so
   * 
   * @param endpoint
   *          a populated rest endpoint
   */
  public TestForm(Endpoint endpoint) {
    if (endpoint == null)
      throw new IllegalArgumentException("endpoint must be set");

    this.autoGenerated = true;
    this.ajaxSubmit = true;
    this.parameters = new ArrayList<Parameter>(3);
    boolean hasUpload = false;
    if (endpoint.getPathParameters() != null) {
      for (Parameter param : endpoint.getPathParameters()) {
        param.setRequired(true);
        this.parameters.add(param);
      }
    }
    if (endpoint.getRequiredParameters() != null) {
      for (Parameter param : endpoint.getRequiredParameters()) {
        param.setRequired(true);
        if (Parameter.Type.File.equals(param.getType())) {
          hasUpload = true;
        }
        this.parameters.add(param);
      }
    }
    if (endpoint.getOptionalParameters() != null) {
      for (Parameter param : endpoint.getOptionalParameters()) {
        param.setRequired(false);
        if (Parameter.Type.File.equals(param.getType())) {
          hasUpload = true;
        }
        this.parameters.add(param);
      }
    }
    if (endpoint.getBodyParameter() != null) {
      Parameter param = endpoint.getBodyParameter();
      param.setRequired(true);
      if (Parameter.Type.File.equals(param.getType())) {
        hasUpload = true;
      }
      this.parameters.add(param);
    }
    if (hasUpload) {
      this.fileUpload = true;
      this.ajaxSubmit = false;
    }
    if (this.parameters.isEmpty() && endpoint.isGetMethod()) {
      this.basic = true;
    }
  }

  /**
   * Returns true if this form has nothing in it, false if there is data in it
   */
  public boolean isEmpty() {
    boolean empty = true;
    if (parameters != null && !parameters.isEmpty()) {
      empty = false;
    } else if (html != null) {
      empty = false;
    } else if (url != null) {
      empty = false;
    }
    return empty;
  }

  /**
   * Controls whether the form will be submitted via ajax and the content
   * rendered on the page, NOTE that uploading any files or downloading any
   * content that is binary will require not using ajax submit, also note that
   * there may be other cases where ajax submission will fail to work OR where
   * normal submission will fail to work (using PUT/DELETE)
   * 
   * @param ajaxSubmit
   */
  public void setAjaxSubmit(boolean ajaxSubmit) {
    this.ajaxSubmit = ajaxSubmit;
  }

  /**
   * Set this to true if the file contains a file upload control, this will be
   * determined automatically for autogenerated forms
   * 
   * @param fileUpload
   */
  public void setFileUpload(boolean fileUpload) {
    this.fileUpload = fileUpload;
    if (this.fileUpload) {
      this.ajaxSubmit = false;
    }
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public boolean isAutoGenerated() {
    return autoGenerated;
  }

  public boolean isAjaxSubmit() {
    return ajaxSubmit;
  }

  public boolean isUsesPathFormat() {
    return usesPathFormat;
  }

  public boolean isFileUpload() {
    return fileUpload;
  }

  public boolean isBasic() {
    return basic;
  }

  public String getHtml() {
    return html;
  }

  public String getUrl() {
    return url;
  }

  public String getTitle() {
    return title;
  }

  public List<Parameter> getParameters() {
    return parameters;
  }

  /**
   * {@inheritDoc}
   * 
   * @see java.lang.Object#toString()
   */
  @Override
  public String toString() {
    return "FORM:items=" + (parameters != null ? parameters.size() : 0) + ":url=" + url + ":html=" + (html != null);
  }

}
