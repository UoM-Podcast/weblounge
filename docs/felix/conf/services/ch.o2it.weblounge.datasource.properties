# Configuration file for the datasource that is used in Weblounge for database
# persistence. EclipseLink is used internally, therefore you are free to put
# any property from the EclipseLink namespace in here.
#
# The configuration file provides sample configurations for H2, MySQL and
# PostgreSQL, as the kernel module includes the drivers for these three database
# engines. In the future, this will be replaced by bundle fragments.
#
# The configuration supports using system properties, allowing you to configure
# a jdbc url like this:
# 
#   jdbc.url=jdb:h2:${java.io.tmpDir}
#

#
# Configuration properties for the connection pool that is being used in
# addition to eclipse link.
# 
# NOTE: Make sure to update the eclipselink.target-database accordingly.
#

# Configuration for H2
jdbc.driver=org.h2.Driver
jdbc.url=jdbc:h2:${java.io.tmpDir}
jdbc.user=sa
jdbc.password=sa

# Configuration for MySQL
#jdbc.driver=com.mysql.jdbc.Driver
#jdbc.url=jdbc:mysql://localhost/weblounge
#jdbc.user=weblounge
#jdbc.password=weblounge_password

# Configuration for PostgreSQL
#jdbc.driver=org.postgresql.Driver
#jdbc.url=jdbc:postgresql://localhost/weblounge
#jdbc.user=weblounge
#jdbc.password=weblounge_password

#
# EclipseLink configuration.
# See http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_(ELUG)#How_to_Use_the_Persistence_Unit_Properties_for_Mappings
# for details on available properties.
#

# Specify the type of database to use. Take a look at the above url to find
# possible values. Weblounge comes with out-of-the-box support for these
# databases: H2, MySQL, PostgreSQL
eclipselink.target-database=H2

# Which logging system to use. [JavaLogger] is the default value.
eclipselink.logging.logger=JavaLogger

# The default for whether or not the EclipseLink session cache is shared by
# multiple client sessions.
eclipselink.cache.shared.default=false

# Specify what Data Definition Language (DDL) generation action you want for
# your JPA entities. EclipseLink will attempt to execute a CREATE TABLE SQL for
# each table. If the table already exists, EclipseLink will follow the default
# behavior of your specific database and JDBC driver combination.
eclipselink.ddl-generation=create-tables

# Execute SQL on the database only (do not generate SQL files).
eclipselink.ddl-generation.output-mode=database